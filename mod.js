// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./mod.d.ts" />
var t="function"==typeof Object.defineProperty?Object.defineProperty:null;var r=function(){try{return t({},"x",{}),!0}catch(t){return!1}},e=Object.defineProperty,n=Object.prototype,o=n.toString,i=n.__defineGetter__,a=n.__defineSetter__,u=n.__lookupGetter__,l=n.__lookupSetter__;var c=e,f=function(t,r,e){var c,f,p,v;if("object"!=typeof t||null===t||"[object Array]"===o.call(t))throw new TypeError("invalid argument. First argument must be an object. Value: `"+t+"`.");if("object"!=typeof e||null===e||"[object Array]"===o.call(e))throw new TypeError("invalid argument. Property descriptor must be an object. Value: `"+e+"`.");if((f="value"in e)&&(u.call(t,r)||l.call(t,r)?(c=t.__proto__,t.__proto__=n,delete t[r],t[r]=e.value,t.__proto__=c):t[r]=e.value),p="get"in e,v="set"in e,f&&(p||v))throw new Error("invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.");return p&&i&&i.call(t,r,e.get),v&&a&&a.call(t,r,e.set),t},p=r()?c:f;var v=function(t,r,e){p(t,r,{configurable:!1,enumerable:!1,writable:!1,value:e})};var y=function(t){return"string"==typeof t};var b=function(){return"function"==typeof Symbol&&"symbol"==typeof Symbol("foo")}();var s=function(){return b&&"symbol"==typeof Symbol.toStringTag},_=Object.prototype.toString,m=_;var g=function(t){return m.call(t)},d=Object.prototype.hasOwnProperty;var j=function(t,r){return null!=t&&d.call(t,r)},w="function"==typeof Symbol?Symbol.toStringTag:"",S=j,h=w,O=_;var P=g,T=function(t){var r,e,n;if(null==t)return O.call(t);e=t[h],r=S(t,h);try{t[h]=void 0}catch(r){return O.call(t)}return n=O.call(t),r?t[h]=e:delete t[h],n},E=s()?T:P,V=String.prototype.valueOf;var C=E,k=function(t){try{return V.call(t),!0}catch(t){return!1}},x=s();var A=function(t){return"object"==typeof t&&(t instanceof String||(x?k(t):"[object String]"===C(t)))},G=y,M=A;var F=v,L=function(t){return G(t)||M(t)},U=A;F(L,"isPrimitive",y),F(L,"isObject",U);var q=L.isPrimitive;var z=L.isPrimitive;var B=function(t){if(!q(t))throw new TypeError("invalid argument. Must provide a primitive string. Value: `"+t+"`.");return t.toLowerCase()},D=function(t){if(!z(t))throw new TypeError("invalid argument. Must provide a primitive string. Value: `"+t+"`.");return t.toUpperCase()},H=L.isPrimitive;var I=function(t){return H(t)&&t===D(t)&&t!==B(t)};export{I as default};
//# sourceMappingURL=mod.js.map
